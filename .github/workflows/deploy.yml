name: 🚀 Deploy Full Stack Application

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [closed]

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: us-east-1
  NODE_VERSION: "20"

jobs:
  # =======================================
  # 🧪 TEST & LINT JOBS
  # =======================================

  test-frontend:
    name: 🧪 Test Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./website

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟦 Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: 📦 Install frontend dependencies
        run: bun install

      - name: 🔍 Lint frontend code
        run: bun run lint

      - name: 🏗️ Build frontend
        run: bun run build

  test-backend:
    name: 🧪 Test Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: 📦 Install backend dependencies
        run: npm ci

      - name: 🏗️ Build backend
        run: npm run build

      - name: 🧪 Run backend tests
        run: npm test

  # =======================================
  # 🚀 DEPLOYMENT JOBS
  # =======================================

  deploy-backend:
    name: 🏗️ Deploy Backend Infrastructure
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true))
    defaults:
      run:
        working-directory: ./backend

    outputs:
      graphql-endpoint: ${{ steps.deploy.outputs.graphql-endpoint }}
      identity-pool-id: ${{ steps.deploy.outputs.identity-pool-id }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: 🟦 Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: ⚙️ Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build TypeScript
        run: npm run build

      - name: 🔍 Pre-deployment checks
        run: bun run check

      - name: 🚀 Deploy backend infrastructure
        id: deploy
        run: |
          echo "🚀 Deploying backend infrastructure..."
          bun run deploy:full

          # Capture outputs
          echo "📊 Capturing CloudFormation outputs..."
          GRAPHQL_ENDPOINT=$(aws cloudformation describe-stacks \
            --stack-name BackendStack \
            --query 'Stacks[0].Outputs[?OutputKey==`GraphQLEndpoint`].OutputValue' \
            --output text \
            --region ${{ env.AWS_REGION }})
            
          IDENTITY_POOL_ID=$(aws cloudformation describe-stacks \
            --stack-name BackendStack \
            --query 'Stacks[0].Outputs[?OutputKey==`IdentityPoolId`].OutputValue' \
            --output text \
            --region ${{ env.AWS_REGION }})

          echo "graphql-endpoint=$GRAPHQL_ENDPOINT" >> $GITHUB_OUTPUT
          echo "identity-pool-id=$IDENTITY_POOL_ID" >> $GITHUB_OUTPUT

          echo "✅ Backend deployed successfully!"
          echo "🔗 GraphQL Endpoint: $GRAPHQL_ENDPOINT"
          echo "🆔 Identity Pool ID: $IDENTITY_POOL_ID"

      - name: 🌱 Seed database
        run: |
          echo "🌱 Seeding database with sample data..."
          bun run seed:small
          echo "✅ Database seeded successfully!"

  deploy-frontend:
    name: 🌐 Deploy Frontend to Amplify
    runs-on: ubuntu-latest
    needs: [deploy-backend]
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true))

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔄 Update Amplify environment variables
        run: |
          echo "🔧 Updating Amplify environment variables..."

          # Get Amplify App ID from CloudFormation
          AMPLIFY_APP_ID=$(aws cloudformation describe-stacks \
            --stack-name HostingStack \
            --query 'Stacks[0].Outputs[?OutputKey==`AmplifyAppId`].OutputValue' \
            --output text \
            --region ${{ env.AWS_REGION }}) || echo "No HostingStack found"

          if [ "$AMPLIFY_APP_ID" != "No HostingStack found" ] && [ -n "$AMPLIFY_APP_ID" ]; then
            echo "📱 Found Amplify App ID: $AMPLIFY_APP_ID"
            
            # Update environment variables
            aws amplify put-app \
              --app-id $AMPLIFY_APP_ID \
              --environment-variables \
                NEXT_PUBLIC_GRAPHQL_ENDPOINT="${{ needs.deploy-backend.outputs.graphql-endpoint }}" \
                NEXT_PUBLIC_AWS_REGION="${{ env.AWS_REGION }}" \
                NEXT_PUBLIC_IDENTITY_POOL_ID="${{ needs.deploy-backend.outputs.identity-pool-id }}" \
              --region ${{ env.AWS_REGION }}
            
            echo "✅ Environment variables updated successfully!"
            
            # Trigger new deployment
            echo "🚀 Triggering Amplify deployment..."
            aws amplify start-job \
              --app-id $AMPLIFY_APP_ID \
              --branch-name main \
              --job-type RELEASE \
              --region ${{ env.AWS_REGION }}
              
            echo "✅ Amplify deployment triggered!"
          else
            echo "⚠️ Amplify app not found or not deployed via CDK. Manual Amplify setup required."
          fi

  # =======================================
  # 🧹 CLEANUP & NOTIFICATIONS
  # =======================================

  notify-deployment:
    name: 📢 Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: 📊 Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend Status**: ${{ needs.deploy-backend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend Status**: ${{ needs.deploy-frontend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **GraphQL Endpoint**: ${{ needs.deploy-backend.outputs.graphql-endpoint }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Identity Pool**: ${{ needs.deploy-backend.outputs.identity-pool-id }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.deploy-backend.result }}" == "success" ] && [ "${{ needs.deploy-frontend.result }}" == "success" ]; then
            echo "✅ **All deployments successful!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some deployments failed. Check logs above.**" >> $GITHUB_STEP_SUMMARY
          fi
